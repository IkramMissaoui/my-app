{"version":3,"sources":["components/TodoItem/TodoItem.js","components/AddItem/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteItem","ListItems","length","map","item","key","id","className","name","age","onClick","AddItem","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","alert","addItem","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAgCeA,G,YA9BG,SAACC,GAAW,IACrBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,WAETC,EADOF,EAAMG,OAElBH,EAAMI,KAAI,SAACC,GACV,OACC,yBAAKC,IAAKD,EAAKE,IACd,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAWI,EAAKE,MAA7D,YAOH,wDAGD,OACC,yBAAKC,UAAU,aACd,6BACC,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEAN,K,OCuBWU,G,kNAhDdC,MAAQ,CACPJ,KAAM,GACNC,IAAK,I,EAENI,aAAe,SAACC,GACf,EAAKC,SAAL,eACED,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAG1BC,aAAe,SAACJ,GACfA,EAAEK,iBAEkD,MAA/CL,EAAEE,OAAOR,KAAKS,OAASH,EAAEE,OAAOP,IAAIQ,QAAiBH,EAAEE,OAAOP,IAAIQ,MAAQ,EAC9EG,MAAM,gFAEN,EAAKtB,MAAMuB,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACbP,KAAM,GACNC,IAAK,O,uDAMP,OACC,6BACC,0BAAMa,SAAUC,KAAKL,cACpB,2BACCM,KAAK,OACLC,YAAY,gBACZnB,GAAG,OACHoB,SAAUH,KAAKV,aACfI,MAAOM,KAAKX,MAAMJ,OAEnB,2BACCgB,KAAK,SACLC,YAAY,eACZnB,GAAG,MACHoB,SAAUH,KAAKV,aACfI,MAAOM,KAAKX,MAAMH,MAEnB,2BAAOe,KAAK,SAASP,MAAM,c,GA1CVU,cCyCPC,E,4MArCdhB,MAAQ,CACPb,MAAO,CACN,CAAEO,GAAI,EAAGE,KAAM,QAASC,IAAK,IAC7B,CAAEH,GAAI,EAAGE,KAAM,QAASC,IAAK,IAC7B,CAAEH,GAAI,EAAGE,KAAM,QAASC,IAAK,M,EAS/BT,WAAa,SAACM,GACb,IAAIP,EAAQ,EAAKa,MAAMb,MAAM8B,QAAO,SAACzB,GACpC,OAAOA,EAAKE,KAAOA,KAEpB,EAAKS,SAAS,CAAEhB,W,EAEjBsB,QAAU,SAACjB,GACVA,EAAKE,GAAKwB,KAAKC,SACf,IAAIhC,EAAQ,EAAKa,MAAMb,MACvBA,EAAMiC,KAAK5B,GACX,EAAKW,SAAS,CAAEhB,W,uDAIhB,OACC,yBAAKQ,UAAU,iBACd,wBAAIA,UAAU,eAAd,wBACA,kBAAC,EAAD,CAAWR,MAAOwB,KAAKX,MAAMb,MAAOC,WAAYuB,KAAKvB,aACrD,kBAAC,EAAD,CAASqB,QAASE,KAAKF,e,GAhCTM,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3e230db.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoItem.css';\r\nconst TodoItems = (props) => {\r\n\tconst { items, deleteItem } = props;\r\n\tlet length = items.length;\r\n\tconst ListItems = length ? (\r\n\t\titems.map((item) => {\r\n\t\t\treturn (\r\n\t\t\t\t<div key={item.id}>\r\n\t\t\t\t\t<span className=\"name\">{item.name}</span>\r\n\t\t\t\t\t<span className=\"age\">{item.age}</span>\r\n\t\t\t\t\t<span className=\"action icon\" onClick={() => deleteItem(item.id)}>\r\n\t\t\t\t\t\t&times;\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t})\r\n\t) : (\r\n\t\t<p>there is now item to show</p>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"ListItems\">\r\n\t\t\t<div>\r\n\t\t\t\t<span className=\"name title\">name</span>\r\n\t\t\t\t<span className=\"age title\">age</span>\r\n\t\t\t\t<span className=\"action title\">action</span>\r\n\t\t\t</div>\r\n\t\t\t{ListItems}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default TodoItems;\r\n","import React, { Component } from 'react';\r\nimport './AddItem.css';\r\nclass AddItem extends Component {\r\n\tstate = {\r\n\t\tname: '',\r\n\t\tage: ''\r\n\t};\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\t[e.target.id]: e.target.value\r\n\t\t});\r\n\t};\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif ((e.target.name.value && e.target.age.value) === '' || e.target.age.value < 0) {\r\n\t\t\talert('Verify the case of name and age are not empty \\n number of age should be >0');\r\n\t\t} else {\r\n\t\t\tthis.props.addItem(this.state);\r\n\t\t\tthis.setState({\r\n\t\t\t\tname: '',\r\n\t\t\t\tage: ''\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"enter name...\"\r\n\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\tvalue={this.state.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tplaceholder=\"enter age...\"\r\n\t\t\t\t\t\tid=\"age\"\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\tvalue={this.state.age}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input type=\"submit\" value=\"add\" />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AddItem;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItems from './components/TodoItem/TodoItem';\nimport AddItem from './components/AddItem/AddItem';\n\nclass App extends Component {\n\tstate = {\n\t\titems: [\n\t\t\t{ id: 1, name: 'Hamza', age: 22 },\n\t\t\t{ id: 2, name: 'ahmad', age: 24 },\n\t\t\t{ id: 3, name: 'ikram', age: 33 }\n\t\t]\n\t};\n\t// deleteItem = (id) => {\n\t// \tlet items = this.state.items;\n\t// \tlet i = items.findIndex((item) => item.id === id);\n\t// \titems.splice(i, 1);\n\t// \tthis.setState({ items });\n\t// };\n\tdeleteItem = (id) => {\n\t\tlet items = this.state.items.filter((item) => {\n\t\t\treturn item.id !== id;\n\t\t});\n\t\tthis.setState({ items });\n\t};\n\taddItem = (item) => {\n\t\titem.id = Math.random();\n\t\tlet items = this.state.items;\n\t\titems.push(item);\n\t\tthis.setState({ items });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App container\">\n\t\t\t\t<h1 className=\"text-center\">Todolist App Reactjs</h1>\n\t\t\t\t<TodoItems items={this.state.items} deleteItem={this.deleteItem} />\n\t\t\t\t<AddItem addItem={this.addItem} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}